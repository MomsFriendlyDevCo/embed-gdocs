{
  "version": 3,
  "sources": ["../lib/embed-gdocs.js"],
  "sourcesContent": ["/**\n* Embed a Google-Docs document within a webpage\n*\n* @param {Object} options Options to configure behaviour\n*\n* @param {String|HTMLElement} options.selector Either the DOM node to replace or a selector to use\n* @param {String} options.url The Google Docs published URL to embed - this generally ends in `/pub?embedded=true`\n* @param {Object} [options.urlOptions] Additional Fetch options when retrieving the document from the `url`\n* @param {Boolean} [options.keepStyle=true] Keep the source document style, if false this removes the style completely\n* @param {Boolean} [options.fixContentTrim=true] Remove the outer wrapping of the element and just use the embedded content\n* @param {Boolean} [options.fixWidth=true] Remove page width restrictions\n* @param {Boolean} [options.fixParaMargins=true] Add slight margin to paragraphs\n* @param {Boolean} [options.fixTableWidth=true] Remove table width restrictions\n* @param {Boolean} [options.fixPadding=true] Remove page padding\n* @param {Boolean} [options.fixLinkTargets=true] Make all links open in a new tab instead of replacing the current one\n* @param {Boolean} [options.fixLinkShorten=true] Remove Google tracking URL prefix from links\n* @param {Boolean} [options.fixImageTitleAsLink=true] If an image \"alternative text\" (actually the `title` attribute) looks like a link make the image linkable - this is to fix how Google Docs weirdly handles image linking\n*\n* @param {Function} [options.onLoad] Called as `(html:String)` when the HTML has been loaded, expected to return the mutated input\n* @param {Function} [options.onMount] Called as `(el:DomElement)` when the Dom element has been created but has not yet been added into the DOM, can mutate the input element\n*\n*/\nexport default function embedGdoc(options) {\n\tlet settings = {\n\t\tselector: null,\n\t\turl: null,\n\t\turlOptions: {\n\t\t\tcache: 'default',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'text/html',\n\t\t\t},\n\t\t},\n\t\tkeepStyle: true,\n\t\tfixContentTrim: true,\n\t\tfixWidth: true,\n\t\tfixTableWidth: true,\n\t\tfixPadding: true,\n\t\tfixLinkTargets: true,\n\t\tfixLinkShorten: true,\n\t\tfixImageTitleAsLink: true,\n\n\t\tonLoad: html => html,\n\t\tonMount: el => null,\n\n\t\t...options,\n\t};\n\n\t/**\n\t* Shiv wrapper as setHTML doesn't seem to be used everywhere\n\t*/\n    let setHtml = (el, html) => el.setHTML ? el.setHTML(html) : el.innerHTML = html;\n\n\tif (!settings.selector) throw new Error('Selector must be specified');\n\tif (!settings.url) throw new Error('URL must be specified');\n\n\tlet embedEl = typeof settings.selector == 'string'\n\t\t? document.querySelector(settings.selector)\n\t\t: settings.selector;\n\n\tif (!embedEl) throw new Error(`Cannot find selector \"${settings.selector} to embed GDoc`);\n\n\treturn fetch(settings.url, settings.urlOptions)\n\t\t.then(res => res.text())\n\t\t.then(html => settings.onLoad(html))\n\t\t.then(html => {\n\t\t\tlet sourceDoc = document.createElement('div')\n\t\t\tlet styleRules = []; // Additional style rules to prepend when done\n\t\t\tsetHtml(sourceDoc, html); // Splat HTML into temporary div\n\n\t\t\tlet doc = settings.fixContentTrim\n\t\t\t\t? sourceDoc.querySelector('.doc-content') // Narrow down to just the contents\n\t\t\t\t: sourceDoc\n\n\t\t\tif (settings.keepStyle) {\n\t\t\t\tlet style = sourceDoc.querySelector('style[type=\"text/css\"]');\n\t\t\t\tdoc.prepend(style);\n\t\t\t}\n\n\t\t\t// fixWidth and/or fixPadding {{{\n\t\t\tif (settings.fixWidth || settings.fixPadding) {\n\t\t\t\tdoc.setAttribute('style', [\n\t\t\t\t\tsettings.fixWidth && 'max-width: none',\n\t\t\t\t\tsettings.fixPadding && 'padding: 0 20px',\n\t\t\t\t]\n\t\t\t\t\t.filter(Boolean)\n\t\t\t\t\t.join(';\\n')\n\t\t\t\t);\n\t\t\t}\n\t\t\t// }}}\n\t\t\t// fixTableWidth {{{\n\t\t\tif (settings.fixTableWidth) {\n\t\t\t\tstyleRules.push(\n\t\t\t\t\t`${settings.selector} table { max-width: none !important; padding: 1.5rem 0 }`, // Let last table row max out width\n\t\t\t\t\t`${settings.selector} table td:last-child { width: auto !important }`, // Let last table row max out width\n\t\t\t\t);\n\t\t\t}\n\t\t\t// }}}\n\t\t\t// fixParaMargins {{{\n\t\t\tif (settings.fixParaMargins) {\n\t\t\t\tstyleRules.push(`${settings.selector} p { margin-bottom: 1rem }`);\n\t\t\t}\n\t\t\t// }}}\n\t\t\t// fixLinkTargets and/or fixLinkShorten {{{\n\t\t\tif (settings.fixLinkTargets || settings.fixLinkShorten) {\n\t\t\t\tArray.from(\n\t\t\t\t\tdoc.querySelectorAll('a')\n\t\t\t\t)\n\t\t\t\t\t.filter(el => /^https?:\\/\\//.test(el.getAttribute('href')))\n\t\t\t\t\t.forEach(el => {\n\t\t\t\t\t\t// fixLinkTargets\n\t\t\t\t\t\tif (settings.fixLinkTargets) el.setAttribute('target', '_blank')\n\n\t\t\t\t\t\t// fixLinkShorten\n\t\t\t\t\t\tif (settings.fixLinkShorten) el.setAttribute('href', el.getAttribute('href')\n\t\t\t\t\t\t\t.replace(/^https:\\/\\/www\\.google\\.com\\/url\\?q=(.*?)&.*$/, '$1') // Remove `&...` slush from GitHub URLs\n\t\t\t\t\t\t\t.replace(/^https:\\/\\/www\\.google\\.com\\/url\\?q=/, '') // Rewrite all other URLs,\n\t\t\t\t\t\t\t.replace(/^(.+)$/, link => unescape(link)) // De-encode URL characters like '#'\n\t\t\t\t\t\t);\n\t\t\t\t\t});\n\t\t\t}\n\t\t\t// }}}\n\t\t\t// fixImageTitleAsLink {{{\n\t\t\tif (settings.fixImageTitleAsLink) {\n\t\t\t\tArray.from(\n\t\t\t\t\tdoc.querySelectorAll('img[title]')\n\t\t\t\t)\n\t\t\t\t\t.filter(el => /^https?:\\/\\//.test(el.getAttribute('title')))\n\t\t\t\t\t.forEach(el => {\n\t\t\t\t\t\tlet wrapper = document.createElement('a');\n\t\t\t\t\t\twrapper.setAttribute('href', el.getAttribute('title'));\n\t\t\t\t\t\tif (settings.fixLinkTargets) wrapper.setAttribute('target', '_blank');\n\n\t\t\t\t\t\tel.replaceWith(wrapper);\n\t\t\t\t\t\twrapper.replaceChildren(el);\n\t\t\t\t\t})\n\t\t\t}\n\t\t\t// }}}\n\n\t\t\tif (styleRules.length > 0) { // Append any override styles we have\n\t\t\t\tlet styleSheet = document.createElement('style');\n\t\t\t\tstyleSheet.setAttribute('type', 'text/css');\n\t\t\t\tsetHtml(styleSheet, styleRules.join('\\n'));\n\t\t\t\tdoc.prepend(styleSheet);\n\t\t\t}\n\n\t\t\tsettings.onMount(doc);\n\t\t\tembedEl.replaceChildren(doc);\n\t\t})\n}\n"],
  "mappings": "AAsBe,SAARA,EAA2BC,EAAS,CAC1C,IAAIC,EAAW,CACd,SAAU,KACV,IAAK,KACL,WAAY,CACX,MAAO,UACP,QAAS,CACR,OAAU,WACX,CACD,EACA,UAAW,GACX,eAAgB,GAChB,SAAU,GACV,cAAe,GACf,WAAY,GACZ,eAAgB,GAChB,eAAgB,GAChB,oBAAqB,GAErB,OAAQC,GAAQA,EAChB,QAASC,GAAM,KAEf,GAAGH,CACJ,EAKOI,EAAU,CAACD,EAAID,IAASC,EAAG,QAAUA,EAAG,QAAQD,CAAI,EAAIC,EAAG,UAAYD,EAE9E,GAAI,CAACD,EAAS,SAAU,MAAM,IAAI,MAAM,4BAA4B,EACpE,GAAI,CAACA,EAAS,IAAK,MAAM,IAAI,MAAM,uBAAuB,EAE1D,IAAII,EAAU,OAAOJ,EAAS,UAAY,SACvC,SAAS,cAAcA,EAAS,QAAQ,EACxCA,EAAS,SAEZ,GAAI,CAACI,EAAS,MAAM,IAAI,MAAM,yBAAyBJ,EAAS,QAAQ,gBAAgB,EAExF,OAAO,MAAMA,EAAS,IAAKA,EAAS,UAAU,EAC5C,KAAKK,GAAOA,EAAI,KAAK,CAAC,EACtB,KAAKJ,GAAQD,EAAS,OAAOC,CAAI,CAAC,EAClC,KAAKA,GAAQ,CACb,IAAIK,EAAY,SAAS,cAAc,KAAK,EACxCC,EAAa,CAAC,EAClBJ,EAAQG,EAAWL,CAAI,EAEvB,IAAIO,EAAMR,EAAS,eAChBM,EAAU,cAAc,cAAc,EACtCA,EAEH,GAAIN,EAAS,UAAW,CACvB,IAAIS,EAAQH,EAAU,cAAc,wBAAwB,EAC5DE,EAAI,QAAQC,CAAK,CAClB,CA8DA,IA3DIT,EAAS,UAAYA,EAAS,aACjCQ,EAAI,aAAa,QAAS,CACzBR,EAAS,UAAY,kBACrBA,EAAS,YAAc,iBACxB,EACE,OAAO,OAAO,EACd,KAAK;AAAA,CAAK,CACZ,EAIGA,EAAS,eACZO,EAAW,KACV,GAAGP,EAAS,QAAQ,2DACpB,GAAGA,EAAS,QAAQ,iDACrB,EAIGA,EAAS,gBACZO,EAAW,KAAK,GAAGP,EAAS,QAAQ,4BAA4B,GAI7DA,EAAS,gBAAkBA,EAAS,iBACvC,MAAM,KACLQ,EAAI,iBAAiB,GAAG,CACzB,EACE,OAAON,GAAM,eAAe,KAAKA,EAAG,aAAa,MAAM,CAAC,CAAC,EACzD,QAAQA,GAAM,CAEVF,EAAS,gBAAgBE,EAAG,aAAa,SAAU,QAAQ,EAG3DF,EAAS,gBAAgBE,EAAG,aAAa,OAAQA,EAAG,aAAa,MAAM,EACzE,QAAQ,gDAAiD,IAAI,EAC7D,QAAQ,uCAAwC,EAAE,EAClD,QAAQ,SAAUQ,GAAQ,SAASA,CAAI,CAAC,CAC1C,CACD,CAAC,EAICV,EAAS,qBACZ,MAAM,KACLQ,EAAI,iBAAiB,YAAY,CAClC,EACE,OAAON,GAAM,eAAe,KAAKA,EAAG,aAAa,OAAO,CAAC,CAAC,EAC1D,QAAQA,GAAM,CACd,IAAIS,EAAU,SAAS,cAAc,GAAG,EACxCA,EAAQ,aAAa,OAAQT,EAAG,aAAa,OAAO,CAAC,EACjDF,EAAS,gBAAgBW,EAAQ,aAAa,SAAU,QAAQ,EAEpET,EAAG,YAAYS,CAAO,EACtBA,EAAQ,gBAAgBT,CAAE,CAC3B,CAAC,EAICK,EAAW,OAAS,EAAG,CAC1B,IAAIK,EAAa,SAAS,cAAc,OAAO,EAC/CA,EAAW,aAAa,OAAQ,UAAU,EAC1CT,EAAQS,EAAYL,EAAW,KAAK;AAAA,CAAI,CAAC,EACzCC,EAAI,QAAQI,CAAU,CACvB,CAEAZ,EAAS,QAAQQ,CAAG,EACpBJ,EAAQ,gBAAgBI,CAAG,CAC5B,CAAC,CACH",
  "names": ["embedGdoc", "options", "settings", "html", "el", "setHtml", "embedEl", "res", "sourceDoc", "styleRules", "doc", "style", "link", "wrapper", "styleSheet"]
}
