{
  "version": 3,
  "sources": ["../lib/clean.js", "../lib/embed-gdocs.js"],
  "sourcesContent": ["/**\n* Take input HTML and return a \"clean\" version of the same fixing various issues\n*\n* All of the options are copied from embedGDoc() but this function adds some low-level subclassable options also\n*\n* @see embedGDoc()\n*/\nexport default function embedGDocClean(html, options) {\n\tlet settings = {\n\t\tid: 'embed-' + Math.floor(9999999 * Math.random()),\n\t\tcssSelector: null,\n\t\tkeepStyle: true,\n\t\tfixContentTrim: true,\n\t\tfixWidth: true,\n\t\tfixTableWidth: true,\n\t\tfixPadding: true,\n\t\tfixLinkTargets: true,\n\t\tfixLinkShorten: true,\n\t\tfixImageTitleAsLink: true,\n\n\n\t\tcreateElement(type) {\n\t\t\treturn document.createElement(type);\n\t\t},\n\n\t\tonLoad: html => html,\n\t\tonMount: el => null,\n\n\t\t...options,\n\t};\n\tif (!settings.cssSelector) settings.cssSelector = '#' + settings.id;\n\n\tlet styleRules = []; // Additional style rules to prepend when done\n\n\tlet sourceDoc = settings.createElement('div');\n\tsourceDoc.innerHTML = html;\n\n\tlet doc = settings.fixContentTrim\n\t\t? sourceDoc.querySelector('.doc-content') || sourceDoc // Narrow down to just the contents if we can\n\t\t: sourceDoc\n\n\tif (settings.keepStyle) {\n\t\tlet style = sourceDoc.querySelector('style[type=\"text/css\"]');\n\t\tdoc.prepend(style);\n\t}\n\n\t// fixWidth and/or fixPadding {{{\n\tif (settings.fixWidth || settings.fixPadding) {\n\t\tdoc.setAttribute('style', [\n\t\t\tsettings.fixWidth && 'max-width: none',\n\t\t\tsettings.fixPadding && 'padding: 0 20px',\n\t\t]\n\t\t\t.filter(Boolean)\n\t\t\t.join(';\\n')\n\t\t);\n\t}\n\t// }}}\n\t// fixTableWidth {{{\n\tif (settings.fixTableWidth) {\n\t\tstyleRules.push(\n\t\t\t`${settings.cssSelector} table { max-width: none !important; padding: 1.5rem 0 }`, // Let last table row max out width\n\t\t\t`${settings.cssSelector} table td:last-child { width: auto !important }`, // Let last table row max out width\n\t\t);\n\t}\n\t// }}}\n\t// fixParaMargins {{{\n\tif (settings.fixParaMargins) {\n\t\tstyleRules.push(`${settings.cssSelector} p { margin-bottom: 1rem }`);\n\t}\n\t// }}}\n\t// fixLinkTargets and/or fixLinkShorten {{{\n\tif (settings.fixLinkTargets || settings.fixLinkShorten) {\n\t\tArray.from(\n\t\t\tdoc.querySelectorAll('a')\n\t\t)\n\t\t\t.filter(el => /^https?:\\/\\//.test(el.getAttribute('href')))\n\t\t\t.forEach(el => {\n\t\t\t\t// fixLinkTargets\n\t\t\t\tif (settings.fixLinkTargets) el.setAttribute('target', '_blank')\n\n\t\t\t\t// fixLinkShorten\n\t\t\t\tif (settings.fixLinkShorten) el.setAttribute('href', el.getAttribute('href')\n\t\t\t\t\t.replace(/^https:\\/\\/www\\.google\\.com\\/url\\?q=(.*?)&.*$/, '$1') // Remove `&...` slush from GitHub URLs\n\t\t\t\t\t.replace(/^https:\\/\\/www\\.google\\.com\\/url\\?q=/, '') // Rewrite all other URLs,\n\t\t\t\t\t.replace(/^(.+)$/, link => unescape(link)) // De-encode URL characters like '#'\n\t\t\t\t);\n\t\t\t});\n\t}\n\t// }}}\n\t// fixImageTitleAsLink {{{\n\tif (settings.fixImageTitleAsLink) {\n\t\tArray.from(\n\t\t\tdoc.querySelectorAll('img[title]')\n\t\t)\n\t\t\t.filter(el => /^https?:\\/\\//.test(el.getAttribute('title')))\n\t\t\t.forEach(el => {\n\t\t\t\tlet wrapper = settings.createElement('a');\n\t\t\t\twrapper.setAttribute('href', el.getAttribute('title'));\n\t\t\t\tif (settings.fixLinkTargets) wrapper.setAttribute('target', '_blank');\n\n\t\t\t\tel.replaceWith(wrapper);\n\t\t\t\twrapper.replaceChildren(el);\n\t\t\t})\n\t}\n\t// }}}\n\n\tif (styleRules.length > 0) { // Append any override styles we have\n\t\tlet styleSheet = settings.createElement('style');\n\t\tstyleSheet.setAttribute('type', 'text/css');\n\t\tstyleSheet.innerHTML = '/' + '* Impored Styles *' + '/\\n' + styleRules.join('\\n');\n\t\tdoc.prepend(styleSheet);\n\t}\n\n\tsettings.onMount(doc);\n\n\treturn doc;\n}\n", "import clean from './clean.js';\n\n/**\n* Embed a Google-Docs document within a webpage\n*\n* @param {Object} options Options to configure behaviour\n*\n* @param {String|HTMLElement} options.selector Either the DOM node to replace or a selector to use\n* @param {String} options.url The Google Docs published URL to embed - this generally ends in `/pub?embedded=true`\n* @param {Object} [options.urlOptions] Additional Fetch options when retrieving the document from the `url`\n* @param {Function} [options.fetcher] Wrapper around `fetch` which should retrieve the URL. Called as `(settings:Object)` and expected to return a string\n* @param {Boolean} [options.keepStyle=true] Keep the source document style, if false this removes the style completely\n* @param {Boolean} [options.fixContentTrim=true] Remove the outer wrapping of the element and just use the embedded content\n* @param {Boolean} [options.fixWidth=true] Remove page width restrictions\n* @param {Boolean} [options.fixParaMargins=true] Add slight margin to paragraphs\n* @param {Boolean} [options.fixTableWidth=true] Remove table width restrictions\n* @param {Boolean} [options.fixPadding=true] Remove page padding\n* @param {Boolean} [options.fixLinkTargets=true] Make all links open in a new tab instead of replacing the current one\n* @param {Boolean} [options.fixLinkShorten=true] Remove Google tracking URL prefix from links\n* @param {Boolean} [options.fixImageTitleAsLink=true] If an image \"alternative text\" (actually the `title` attribute) looks like a link make the image linkable - this is to fix how Google Docs weirdly handles image linking\n*\n* @param {Function} [options.onLoad] Called as `(html:String)` when the HTML has been loaded, expected to return the mutated input\n* @param {Function} [options.onMount] Called as `(el:DomElement)` when the Dom element has been created but has not yet been added into the DOM, can mutate the input element\n*\n*/\nexport default function embedGdoc(options) {\n\tlet settings = {\n\t\tselector: null,\n\t\turl: null,\n\t\turlOptions: {\n\t\t\tcache: 'default',\n\t\t\theaders: {\n\t\t\t\t'Accept': 'text/html',\n\t\t\t},\n\t\t},\n\t\tfetcher(settings) {\n\t\t\treturn fetch(settings.url, settings.options)\n\t\t\t\t.then(response => response.text())\n\t\t},\n\t\tkeepStyle: true,\n\t\tfixContentTrim: true,\n\t\tfixWidth: true,\n\t\tfixTableWidth: true,\n\t\tfixPadding: true,\n\t\tfixLinkTargets: true,\n\t\tfixLinkShorten: true,\n\t\tfixImageTitleAsLink: true,\n\n\t\tonLoad: html => html,\n\t\tonMount: el => null,\n\n\t\t...options,\n\t};\n\n\t/**\n\t* Shiv wrapper as setHTML doesn't seem to be used everywhere\n\t*/\n    let setHtml = (el, html) => el.setHTML ? el.setHTML(html) : el.innerHTML = html;\n\n\tif (!settings.selector) throw new Error('Selector must be specified');\n\tif (!settings.url) throw new Error('URL must be specified');\n\n\tlet embedEl = typeof settings.selector == 'string'\n\t\t? document.querySelector(settings.selector)\n\t\t: settings.selector;\n\n\tif (!embedEl) throw new Error(`Cannot find selector \"${settings.selector} to embed GDoc`);\n\n\treturn Promise.resolve()\n\t\t.then(()=> settings.fetcher(settings))\n\t\t.then(html => settings.onLoad(html))\n\t\t.then(html => clean(html, options))\n\t\t.then(result => embedEl.replaceChildren(result))\n}\n"],
  "mappings": "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",
  "names": ["embedGDocClean", "html", "options", "settings", "type", "el", "styleRules", "sourceDoc", "doc", "style", "link", "wrapper", "styleSheet", "embedGdoc", "options", "settings", "response", "html", "el", "setHtml", "embedEl", "embedGDocClean", "result"]
}
